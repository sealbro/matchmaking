// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: matchmaking.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Matchmaking_AddPlayer_FullMethodName    = "/matchmaking.Matchmaking/AddPlayer"
	Matchmaking_RemovePlayer_FullMethodName = "/matchmaking.Matchmaking/RemovePlayer"
	Matchmaking_Status_FullMethodName       = "/matchmaking.Matchmaking/Status"
)

// MatchmakingClient is the client API for Matchmaking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchmakingClient interface {
	AddPlayer(ctx context.Context, in *AddPlayerRequest, opts ...grpc.CallOption) (*AddPlayerResponse, error)
	RemovePlayer(ctx context.Context, in *RemovePlayerRequest, opts ...grpc.CallOption) (*RemovePlayerResponse, error)
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StatusResponse], error)
}

type matchmakingClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchmakingClient(cc grpc.ClientConnInterface) MatchmakingClient {
	return &matchmakingClient{cc}
}

func (c *matchmakingClient) AddPlayer(ctx context.Context, in *AddPlayerRequest, opts ...grpc.CallOption) (*AddPlayerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPlayerResponse)
	err := c.cc.Invoke(ctx, Matchmaking_AddPlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingClient) RemovePlayer(ctx context.Context, in *RemovePlayerRequest, opts ...grpc.CallOption) (*RemovePlayerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemovePlayerResponse)
	err := c.cc.Invoke(ctx, Matchmaking_RemovePlayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchmakingClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StatusResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Matchmaking_ServiceDesc.Streams[0], Matchmaking_Status_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StatusRequest, StatusResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Matchmaking_StatusClient = grpc.ServerStreamingClient[StatusResponse]

// MatchmakingServer is the server API for Matchmaking service.
// All implementations must embed UnimplementedMatchmakingServer
// for forward compatibility.
type MatchmakingServer interface {
	AddPlayer(context.Context, *AddPlayerRequest) (*AddPlayerResponse, error)
	RemovePlayer(context.Context, *RemovePlayerRequest) (*RemovePlayerResponse, error)
	Status(*StatusRequest, grpc.ServerStreamingServer[StatusResponse]) error
	mustEmbedUnimplementedMatchmakingServer()
}

// UnimplementedMatchmakingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMatchmakingServer struct{}

func (UnimplementedMatchmakingServer) AddPlayer(context.Context, *AddPlayerRequest) (*AddPlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPlayer not implemented")
}
func (UnimplementedMatchmakingServer) RemovePlayer(context.Context, *RemovePlayerRequest) (*RemovePlayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePlayer not implemented")
}
func (UnimplementedMatchmakingServer) Status(*StatusRequest, grpc.ServerStreamingServer[StatusResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedMatchmakingServer) mustEmbedUnimplementedMatchmakingServer() {}
func (UnimplementedMatchmakingServer) testEmbeddedByValue()                     {}

// UnsafeMatchmakingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchmakingServer will
// result in compilation errors.
type UnsafeMatchmakingServer interface {
	mustEmbedUnimplementedMatchmakingServer()
}

func RegisterMatchmakingServer(s grpc.ServiceRegistrar, srv MatchmakingServer) {
	// If the following call pancis, it indicates UnimplementedMatchmakingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Matchmaking_ServiceDesc, srv)
}

func _Matchmaking_AddPlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServer).AddPlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaking_AddPlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServer).AddPlayer(ctx, req.(*AddPlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaking_RemovePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePlayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchmakingServer).RemovePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Matchmaking_RemovePlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchmakingServer).RemovePlayer(ctx, req.(*RemovePlayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Matchmaking_Status_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MatchmakingServer).Status(m, &grpc.GenericServerStream[StatusRequest, StatusResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Matchmaking_StatusServer = grpc.ServerStreamingServer[StatusResponse]

// Matchmaking_ServiceDesc is the grpc.ServiceDesc for Matchmaking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Matchmaking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matchmaking.Matchmaking",
	HandlerType: (*MatchmakingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPlayer",
			Handler:    _Matchmaking_AddPlayer_Handler,
		},
		{
			MethodName: "RemovePlayer",
			Handler:    _Matchmaking_RemovePlayer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Status",
			Handler:       _Matchmaking_Status_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "matchmaking.proto",
}
